<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="13" passed="10">
  <reporter-output>
  </reporter-output>
  <suite name="Reassured" duration-ms="1261" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:48 AMT">
    <groups>
      <group name="group3">
        <method signature="validateJsonTests.getElementsByNameAndProperty()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getElementsByNameAndProperty" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getElementsByNameAndProperty2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getElementsByNameAndProperty2" class="validationTests.validateJsonTests"/>
      </group> <!-- group3 -->
      <group name="group2">
        <method signature="validateJsonTests.checkToppingsIds()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkToppingsIds" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.checkTypesById()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkTypesById" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.collectDoubleValues()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="collectDoubleValues" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getIdsByBatterType()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getIdsByBatterType" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getIdsByBatterType1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getIdsByBatterType1" class="validationTests.validateJsonTests"/>
      </group> <!-- group2 -->
      <group name="group1">
        <method signature="validateJsonTests.checkAllCategories()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkAllCategories" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.checkCategory()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkCategory" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getAllAuthorsLength()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getAllAuthorsLength" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getBookNames()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getBookNames" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getMaxPrice()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getMaxPrice" class="validationTests.validateJsonTests"/>
        <method signature="validateJsonTests.getPriceSum()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getPriceSum" class="validationTests.validateJsonTests"/>
      </group> <!-- group1 -->
    </groups>
    <test name="Test" duration-ms="1261" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:48 AMT">
      <class name="validationTests.validateJsonTests">
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="19" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:47 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:47 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:47 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="checkAllCategories()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkAllCategories" duration-ms="868" started-at="2021-04-09T12:54:47 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkAllCategories -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="13" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="checkCategory()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkCategory" duration-ms="35" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkCategory -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="checkToppingsIds()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkToppingsIds" duration-ms="31" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkToppingsIds -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="FAIL" signature="checkTypesById()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="checkTypesById" duration-ms="15" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[
Expected: every item is "Regular"
     but: an item was <[Regular]>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 
Expected: every item is "Regular"
     but: an item was <[Regular]>
at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:18)
at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
at validationTests.validateJsonTests.checkTypesById(validateJsonTests.java:116)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkTypesById -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="collectDoubleValues()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="collectDoubleValues" duration-ms="15" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- collectDoubleValues -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="FAIL" signature="getAllAuthorsLength()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getAllAuthorsLength" duration-ms="29" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The parameter "author" was used but not defined. Define parameters using the JsonPath.params(...) function]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The parameter "author" was used but not defined. Define parameters using the JsonPath.params(...) function
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:257)
at io.restassured.internal.path.json.JSONAssertion.getAsJsonObject(JSONAssertion.groovy:50)
at io.restassured.internal.path.json.JSONAssertion$getAsJsonObject.callCurrent(Unknown Source)
at io.restassured.internal.path.json.JSONAssertion.getResult(JSONAssertion.groovy:28)
at io.restassured.path.json.JsonPath.get(JsonPath.java:203)
at io.restassured.path.json.JsonPath.getInt(JsonPath.java:237)
at validationTests.validateJsonTests.getAllAuthorsLength(validateJsonTests.java:75)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
Caused by: groovy.lang.MissingPropertyException: No such property: author for class: java.lang.String
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:65)
at org.codehaus.groovy.runtime.callsite.GetEffectivePojoPropertySite.getProperty(GetEffectivePojoPropertySite.java:65)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:298)
at Script1$_run_closure1.doCall(Script1.groovy:1)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
at groovy.lang.Closure.call(Closure.java:405)
at groovy.lang.Closure.call(Closure.java:421)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3574)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3559)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3659)
at org.codehaus.groovy.runtime.dgm$87.invoke(Unknown Source)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
at Script1.run(Script1.groovy:1)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:443)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:481)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:452)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrap.invoke(PogoMetaMethodSite.java:179)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
at io.restassured.internal.path.json.JSONAssertion.eval(JSONAssertion.groovy:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.path.json.JSONAssertion.getAsJsonObject(JSONAssertion.groovy:46)
... 36 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAuthorsLength -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="getBookNames()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getBookNames" duration-ms="14" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookNames -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="getElementsByNameAndProperty()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getElementsByNameAndProperty" duration-ms="13" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElementsByNameAndProperty -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="FAIL" signature="getElementsByNameAndProperty2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getElementsByNameAndProperty2" duration-ms="25" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid JSON expression:
Script1.groovy: 1: expecting EOF, found '[' @ line 1, column 37.
                            $.elements[?(@.type == 'TEXT' && @.properties[0].producesVideo == false)].name
                                       ^

1 error
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid JSON expression:
Script1.groovy: 1: expecting EOF, found '[' @ line 1, column 37.
                            $.elements[?(@.type == 'TEXT' && @.properties[0].producesVideo == false)].name
                                       ^

1 error

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:257)
at io.restassured.internal.path.json.JSONAssertion.getAsJsonObject(JSONAssertion.groovy:57)
at io.restassured.internal.path.json.JSONAssertion$getAsJsonObject.callCurrent(Unknown Source)
at io.restassured.internal.path.json.JSONAssertion.getResult(JSONAssertion.groovy:28)
at io.restassured.path.json.JsonPath.get(JsonPath.java:203)
at io.restassured.path.json.JsonPath.getString(JsonPath.java:352)
at validationTests.validateJsonTests.getElementsByNameAndProperty2(validateJsonTests.java:161)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
Caused by: org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Script1.groovy: 1: expecting EOF, found '[' @ line 1, column 37.
   restAssuredJsonRootObject.$.elements[?(@.type == 'TEXT' && @.properties[0].producesVideo == false)].name
                                       ^

1 error

at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311)
at org.codehaus.groovy.control.ErrorCollector.addFatalError(ErrorCollector.java:151)
at org.codehaus.groovy.control.ErrorCollector.addError(ErrorCollector.java:121)
at org.codehaus.groovy.control.ErrorCollector.addError(ErrorCollector.java:133)
at org.codehaus.groovy.control.SourceUnit.addError(SourceUnit.java:325)
at org.codehaus.groovy.antlr.AntlrParserPlugin.transformCSTIntoAST(AntlrParserPlugin.java:224)
at org.codehaus.groovy.antlr.AntlrParserPlugin.parseCST(AntlrParserPlugin.java:190)
at org.codehaus.groovy.control.SourceUnit.parse(SourceUnit.java:226)
at org.codehaus.groovy.control.CompilationUnit$1.call(CompilationUnit.java:196)
at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:954)
at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:636)
at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:612)
at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:589)
at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:401)
at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89)
at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:341)
at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:338)
at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147)
at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:336)
at groovy.lang.GroovyShell.parseClass(GroovyShell.java:546)
at groovy.lang.GroovyShell.parse(GroovyShell.java:558)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:442)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:481)
at groovy.lang.GroovyShell.evaluate(GroovyShell.java:452)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrap.invoke(PogoMetaMethodSite.java:179)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
at io.restassured.internal.path.json.JSONAssertion.eval(JSONAssertion.groovy:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:184)
at io.restassured.internal.path.json.JSONAssertion.getAsJsonObject(JSONAssertion.groovy:46)
... 36 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getElementsByNameAndProperty2 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="6" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="getIdsByBatterType()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getIdsByBatterType" duration-ms="27" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIdsByBatterType -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="getIdsByBatterType1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getIdsByBatterType1" duration-ms="11" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIdsByBatterType1 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="3" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="getMaxPrice()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getMaxPrice" duration-ms="2" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMaxPrice -->
        <test-method status="PASS" signature="beforeGroup2()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup2" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup2 -->
        <test-method status="PASS" signature="beforeGroup1()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup1" is-config="true" duration-ms="0" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup1 -->
        <test-method status="PASS" signature="beforeGroup3()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="beforeGroup3" is-config="true" duration-ms="1" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeGroup3 -->
        <test-method status="PASS" signature="getPriceSum()[pri:0, instance:validationTests.validateJsonTests@464bee09]" name="getPriceSum" duration-ms="11" started-at="2021-04-09T12:54:48 AMT" finished-at="2021-04-09T12:54:48 AMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPriceSum -->
      </class> <!-- validationTests.validateJsonTests -->
    </test> <!-- Test -->
  </suite> <!-- Reassured -->
</testng-results>
